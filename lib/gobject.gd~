#############################################################################
##
#W  sheet.gd                  	XGAP library                     Frank Celler
##
#H  @(#)$Id: gobject.gd~,v 1.1 1997/12/08 21:48:03 frank Exp $
##
#Y  Copyright 1995-1997,  Lehrstuhl D fuer Mathematik,  RWTH Aachen,  Germany
#Y  Copyright 1997,       Frank Celler,                 Huerth,       Germany
##
##  This file contains all operations for graphic sheets.
##


#############################################################################
##

#C  IsGraphicWindow . . . . . . . . . . . . . . . . . .   category of windows
##
IsGraphicWindow := NewCategory(
    "IsGraphicWindow",
    IsObject );


#############################################################################
##
#O  GraphicWindow( <catrep>, <name>, <width>, <height> ) a new graphic window
##
GraphicWindow := NewOperation(
    "GraphicWindow",
    [ IsObject, IsString, IsInt, IsInt ] );


#############################################################################
##
#V  GraphicWindowsFamily  . . . . . . . . . . . . . . . family of all windows
##
GraphicWindowsFamily := NewFamily( "GraphicWindowsFamily" );


#############################################################################
##

#C  IsGraphicSheet  . . . . . . . . . . . . . . .  category of graphic sheets
##
IsGraphicSheet := NewCategory(
    "IsGraphicSheet",
    IsGraphicWindow );


#############################################################################
##
#O  GraphicSheet( <name>, <width>, <height> ) . . . . . . a new graphic sheet
##
##  creates  a  graphic  sheet with  title  <name>  and dimension <width>  by
##  <height>.  A graphic sheet  is the basic  tool  to draw something,  it is
##  like a piece of  paper on which you can  put your graphic objects, and to
##  which you  can attach your  menus.   The coordinate $(0,0)$ is  the upper
##  left corner, $(<width>,<height>)$ the lower right.
##
##  It is  possible to  change the default   behaviour of a graphic sheet  by
##  installing methods (or   sometimes  called callbacks) for the   following
##  events.  For example to install  the function `MyLeftPBDown' as  callback
##  for the left mouse button  down event of a  graphic <sheet>, you have  to
##  call `InstallCallback' as follows.
##
##  \begintt
##      gap> InstallCallback( sheet, "LeftPBDown", MyLeftPBDown );
##  \endtt
##
##  `Close( <sheet> )':
##    the function will be called as soon  as the user selects <close graphic
##    sheet>,  the installed   function gets  the graphic <sheet> to close as
##    argument.
##
##  `LeftPBDown( <sheet>, <x>, <y> )':
##    the function will be called as soon as  the user presses the left mouse
##    button inside  the   graphic sheet, the  installed   function  gets the
##    graphic <sheet>,  the <x> coordinate and  <y> coordinate of the pointer
##    as arguments.
##    
##  `RightPBDown( <sheet>, <x>, <y> )':
##    same  as `LeftPBDown' except that the  user has pressed the right mouse
##    button.
##
##  `ShiftLeftPBDown( <sheet>, <x>, <y> )':
##    same  as 'LeftPBDown' except that the  user has  pressed the left mouse
##    button together with the <SHIFT> key on the keyboard.
##
##  `ShiftRightPBDown( <sheet>, <x>, <y> )':
##    same as  'LeftPBDown' except that the  user has pressed the right mouse
##    button together with the <SHIFT> key on the keyboard.
##
##  `CtrlLeftPBDown( <sheet>, <x>, <y> )':
##    same  as 'LeftPBDown' except that the  user has pressed  the left mouse
##    button together with the <CTR> key on the keyboard.
##
##  `CtrlRightPBDown( <sheet>, <x>, <y> )':
##    same as 'LeftPBDown'  except that the  user has pressed the right mouse
##    button together with the <CTR> key on the keyboard.
##
GraphicSheet := NewOperation(
    "GraphicSheet",
    [ IsString, IsInt, IsInt ] );


#############################################################################
##
#O  Close( <sheet> )  . . . . . . . . . . . . . . . .  create a graphic sheet
##
Close := NewOperation(
    "Close",
    [ IsGraphicSheet ] );


#############################################################################
##
#A  WindowId( <sheet> ) . . . . . . . . . . . . . . . .  window id of <sheet>
##
WindowId := NewAttribute(
    "WindowId",
    IsGraphicSheet );

HasWindowId := Tester(WindowId);
SetWindowId := Setter(WindowId);


#############################################################################
##
#A  DefaultsForGraphicObject( <sheet> ) . . . . . . . . .  default color, etc
##
DefaultsForGraphicObject := NewAttribute(
    "DefaultsForGraphicObject",
    IsGraphicSheet );

HasDefaultsForGraphicObject := Tester(DefaultsForGraphicObject);
SetDefaultsForGraphicObject := Setter(DefaultsForGraphicObject);


#############################################################################
##

#F  IsAlive . . . . . . . . . . . . . . . filter for living displayed objects
##
IsAlive    := NewFilter( "IsAlive" );
HasIsAlive := Tester(IsAlive);


#############################################################################
##
#F  UseFastUpdate . . . . . . . . . . . . . . . . . .  filter for fast update
##
UseFastUpdate := NewFilter( "UseFastUpdate" );
HasFastUpdate := Tester(UseFastUpdate);


#############################################################################
##

#C  IsGraphicObject . . . . . . . . . . . . . . . category of graphic objects
##
IsGraphicObject := NewCategory(
    "IsGraphicObject",
    IsObject );


#############################################################################
##
#O  GraphicObject( <catrep>, <sheet>, <defaults> )  . . .  new graphic object
##
GraphicObject := NewOperation(
    "GraphicObject",
    [ IsObject, IsGraphicSheet, IsRecord ] );


#############################################################################
##
#O  Destroy( <object> ) . . . . . . . . . . . . . . . detroy a graphic object
##
Destroy := NewOperation(
    "Destroy",
    [ IsGraphicObject ] );


#############################################################################
##
#O  Draw( <object> )  . . . . . . . . . . . . . . . (re)draw a graphic object
##
Draw := NewOperation(
    "Draw",
    [ IsGraphicObject ] );


#############################################################################
##
#O  Move( <object>, <x>, <y> )  . . . . . . . . . . . . . . . . absolute move
##
Move := NewOperation(
    "Move",
    [ IsGraphicObject, IsInt, IsInt ] );


#############################################################################
##
#O  MoveDelta( <object>, <dx>, <dy> ) . . . . . . . . . . . . . .  delta move
##
MoveDelta := NewOperation(
    "MoveDelta",
    [ IsGraphicObject, IsInt, IsInt ] );


#############################################################################
##
#O  PrintInfo( <object> ) . . . . . . . . . . . . . . . . .  print debug info
##
PrintInfo := NewOperation(
    "PrintInfo",
    [ IsGraphicObject ] );


#############################################################################
##
#O  Recolor( <object>, <col> )  . . . . . . . . . . . . . . . .  change color
##
Recolor := NewOperation(
    "Recolor",
    [ IsGraphicObject, IsColor ] );

Recolour := Recolor;


#############################################################################
##

#O  Box( <sheet>, <x>, <y>, <w>, <h> )  . . . . . . . . draw a box in a sheet
#O  Box( <sheet>, <x>, <y>, <w>, <h>, <defaults> )  . . draw a box in a sheet
##
##
##  creates a new graphic object,  namely a filled black  box, on the graphic
##  sheet <sheet> and  returns a {\GAP} record describing  this  object.  The
##  for    corners     of  the    box    are   $(<x>,<y>)$,  $(<x>+<w>,<y>)$,
##  $(<x>+<w>,<y>+<h>)$, and $(<x>,<y>+<h>)$.
##
##  Note that the box is $<w>+1$ pixel wide and $<h>+1$ pixels high.
##
##  The following functions   can be  used  for  boxes: `in'  (see "in  for
##  Graphic   Objects"), `Reshape'   (see  "Reshape"),  `Move'  (see "Move"),
##  `MoveDelta' (see   "MoveDelta"), `Recolor' (see "Recolor"),  and `Delete'
##  (see "Delete").
##
##  If a record <defaults> is given and contains a component `color' of value
##  <color>, the  function like the first version  of  'Box', except that the
##  color of the box will be <color>.  See "Color Models" for how to select a
##  <color>.
##
Box := NewOperation(
    "Box",
    [ IsGraphicSheet, IsInt, IsInt, IsInt, IsInt, IsRecord ] );


#############################################################################
##

#E  sheet.gd  . . . . . . . . . . . . . . . . . . . . . . . . . . . ends here
##
