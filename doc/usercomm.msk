\Section{Menus in Graphic Sheets}

\Declaration{Menu}[menu]
\Declaration{Check}
\Declaration{Enable}

See the explanation of `GraphicSheet' ("CloseCallback") for the ``Close''
event, which occurs when the user selects the menu entry ``Close'' in the
``GAP'' menu.

\Section{Mouse Events}

When a mouse event occurs, this is communicated to {\GAP} via a function
call which in turn triggers a callback. As described in "GraphicSheet" to
"CtrlRightPBDown" the following callback keys are predefined as reactions
on mouse events: `LeftPBDown', `RightPBDown', `ShiftLeftPBDown',
`ShiftRightPBDown', `CtrlLeftPBDown', `CtrlRightPBDown'.

Note that when your function gets called, the mouse button will still be
pressed. So it can react and for example wait for the release. There is an 
easy way to find out about the state of the mouse buttons after the event:

\Declaration{WcQueryPointer}

This function is used in

\Declaration{Drag}

\Section{Dialogs}

\Declaration{Dialog}

\Declaration{Query}

%Puts a dialog on screen. Returns `false' if the user clicks ``Cancel'' and
%a string value or filename, if the user clicks ``OK'', depending on the
%type of dialog. <default> is an optional initialization value for the string.

\Section{Popups}

\Declaration{PopupMenu}

\>`Query'{Query for popup@`Query for popup}

actually puts a popup on screen. `Query' returns the string of the
selected entry or false if the user clicks outside the popup. 
See also `Query' for dialogs in "Query".

\Declaration{TextSelector}

\>`Enable( <sel>,<bt>,<flag> )'{Enable for text selectors}@{`Enable' for text selectors}

Enables or disables the button <bt> (string value) of the text selector
<sel>, according to <flag>.

\>`Reset( <sel> )'{Reset for text selectors}

Resets all strings of a text selector.

\>`Close( <sel> )'{Close for text selectors}

Closes a text selector. It vanishes from screen.


